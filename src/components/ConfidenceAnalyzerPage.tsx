import React, { useState, useRef } from 'react';
import { Target, Upload, Play, RotateCw, Download, BarChart3, Info, Eye, Mic2, Users, Volume2 } from 'lucide-react';
import { API_ENDPOINTS } from '../config/api';

interface AnalysisResult {
  overall_score: number;
  audio_score: number;
  visual_score: number;
  detailed_scores: {
    volume: number;
    pitch_variation: number;
    speech_rate: number;
    filler_words: number;
    eye_contact: number;
    posture: number;
    smile_quantity: number;
    hand_gestures: number;
  };
  message: string;
}

const ConfidenceAnalyzerPage: React.FC = () => {
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [status, setStatus] = useState('');
  const [statusType, setStatusType] = useState('info');

  const fileInputRef = useRef<HTMLInputElement>(null);

  const updateStatus = (message: string, type: string, duration: number = 5000) => {
    setStatus(message);
    setStatusType(type);
    if (type !== 'error') {
      setTimeout(() => setStatus(''), duration);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.type.startsWith('video/')) {
        setVideoFile(file);
        setAnalysisResult(null);
        updateStatus(`Video "${file.name}" selected. Click analyze to process.`, 'success');
      } else {
        updateStatus('Please select a video file.', 'error');
      }
    }
  };

  const analyzeVideo = async () => {
    if (!videoFile) return;

    setLoading(true);
    updateStatus('Analyzing video... This may take a few minutes.', 'info', 30000);

    try {
      const formData = new FormData();
      formData.append('video', videoFile);

      const response = await fetch(API_ENDPOINTS.CONFIDENCE_ANALYZE, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      setAnalysisResult(data);
      updateStatus('Analysis completed successfully!', 'success');

    } catch (error) {
      console.error('Analysis error:', error);
      updateStatus(`Analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  const downloadReport = () => {
    if (analysisResult) {
      const report = `Confidence Analysis Report
==============================

Overall Score: ${analysisResult.overall_score.toFixed(1)}/10.0
Audio Score: ${analysisResult.audio_score.toFixed(1)}/10.0
Visual Score: ${analysisResult.visual_score.toFixed(1)}/10.0

Detailed Scores:
- Volume: ${analysisResult.detailed_scores.volume.toFixed(1)}/10
- Pitch Variation: ${analysisResult.detailed_scores.pitch_variation.toFixed(1)}/10
- Speech Rate: ${analysisResult.detailed_scores.speech_rate.toFixed(1)}/10
- Filler Words: ${analysisResult.detailed_scores.filler_words.toFixed(1)}/10
- Eye Contact: ${analysisResult.detailed_scores.eye_contact.toFixed(1)}/10
- Posture: ${analysisResult.detailed_scores.posture.toFixed(1)}/10
- Smile Quantity: ${analysisResult.detailed_scores.smile_quantity.toFixed(1)}/10
- Hand Gestures: ${analysisResult.detailed_scores.hand_gestures.toFixed(1)}/10

Generated by AI Toolbox Hub`;

      const element = document.createElement('a');
      const file = new Blob([report], { type: 'text/plain' });
      element.href = URL.createObjectURL(file);
      element.download = 'confidence-analysis-report.txt';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBackground = (score: number) => {
    if (score >= 8) return 'bg-green-100 dark:bg-green-900';
    if (score >= 6) return 'bg-yellow-100 dark:bg-yellow-900';
    return 'bg-red-100 dark:bg-red-900';
  };

  const getStatusColor = () => {
    switch (statusType) {
      case 'success':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      case 'error':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      default:
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
    }
  };

  return (
    <div className="bg-gray-50 dark:bg-gray-900 min-h-screen p-4 sm:p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-center text-gray-800 dark:text-white mb-8">
          <Target className="inline-block w-10 h-10 mr-4" />
          Confidence Analyzer
        </h1>

        <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6 sm:p-8">
          <div className="space-y-6">
            {/* File Upload Section */}
            <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6">
              <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                <Upload className="w-6 h-6 mr-2" />
                Upload Video for Analysis
              </h3>
              <input
                ref={fileInputRef}
                type="file"
                accept="video/*"
                onChange={handleFileUpload}
                className="hidden"
                id="videoInput"
              />
              <div className="flex flex-wrap gap-4 items-center justify-center">
                <button
                  onClick={() => fileInputRef.current?.click()}
                  disabled={loading}
                  className="flex items-center justify-center gap-2 px-6 py-3 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Upload className="w-5 h-5" />
                  Choose Video File
                </button>
                {videoFile && (
                  <button
                    onClick={analyzeVideo}
                    disabled={loading}
                    className="flex items-center justify-center gap-2 px-6 py-3 rounded-lg bg-green-600 text-white font-semibold hover:bg-green-700 transition shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {loading ? <RotateCw className="w-5 h-5 animate-spin" /> : <Play className="w-5 h-5" />}
                    Analyze Confidence
                  </button>
                )}
              </div>
              {videoFile && (
                <p className="mt-2 text-sm text-gray-600 dark:text-gray-400 text-center">
                  Selected: {videoFile.name}
                </p>
              )}
            </div>

            {/* Status */}
            {status && (
              <div className={`text-center p-3 rounded-lg transition-all duration-300 ${getStatusColor()}`}>
                {status}
              </div>
            )}

            {/* Results Section */}
            {analysisResult && (
              <div className="space-y-6 border-t pt-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-2xl font-bold text-gray-800 dark:text-white flex items-center">
                    <BarChart3 className="w-6 h-6 mr-2" />
                    Analysis Results
                  </h3>
                  <button
                    onClick={downloadReport}
                    className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
                  >
                    <Download className="w-4 h-4" />
                    Download Report
                  </button>
                </div>

                {/* Overall Scores */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className={`p-6 rounded-lg ${getScoreBackground(analysisResult.overall_score)}`}>
                    <div className="text-center">
                      <div className={`text-3xl font-bold ${getScoreColor(analysisResult.overall_score)}`}>
                        {analysisResult.overall_score.toFixed(1)}
                      </div>
                      <div className="text-sm font-medium text-gray-600 dark:text-gray-300">Overall Score</div>
                    </div>
                  </div>
                  <div className={`p-6 rounded-lg ${getScoreBackground(analysisResult.audio_score)}`}>
                    <div className="text-center">
                      <div className={`text-3xl font-bold ${getScoreColor(analysisResult.audio_score)}`}>
                        {analysisResult.audio_score.toFixed(1)}
                      </div>
                      <div className="text-sm font-medium text-gray-600 dark:text-gray-300 flex items-center justify-center">
                        <Mic2 className="w-4 h-4 mr-1" />
                        Audio Score
                      </div>
                    </div>
                  </div>
                  <div className={`p-6 rounded-lg ${getScoreBackground(analysisResult.visual_score)}`}>
                    <div className="text-center">
                      <div className={`text-3xl font-bold ${getScoreColor(analysisResult.visual_score)}`}>
                        {analysisResult.visual_score.toFixed(1)}
                      </div>
                      <div className="text-sm font-medium text-gray-600 dark:text-gray-300 flex items-center justify-center">
                        <Eye className="w-4 h-4 mr-1" />
                        Visual Score
                      </div>
                    </div>
                  </div>
                </div>

                {/* Detailed Scores */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Audio Metrics */}
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                    <h4 className="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                      <Volume2 className="w-5 h-5 mr-2" />
                      Audio Metrics
                    </h4>
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Volume</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.volume)}`}>
                          {analysisResult.detailed_scores.volume.toFixed(1)}/10
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Pitch Variation</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.pitch_variation)}`}>
                          {analysisResult.detailed_scores.pitch_variation.toFixed(1)}/10
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Speech Rate</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.speech_rate)}`}>
                          {analysisResult.detailed_scores.speech_rate.toFixed(1)}/10
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Filler Words</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.filler_words)}`}>
                          {analysisResult.detailed_scores.filler_words.toFixed(1)}/10
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Visual Metrics */}
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                    <h4 className="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                      <Eye className="w-5 h-5 mr-2" />
                      Visual Metrics
                    </h4>
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Eye Contact</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.eye_contact)}`}>
                          {analysisResult.detailed_scores.eye_contact.toFixed(1)}/10
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Posture</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.posture)}`}>
                          {analysisResult.detailed_scores.posture.toFixed(1)}/10
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Smile Quantity</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.smile_quantity)}`}>
                          {analysisResult.detailed_scores.smile_quantity.toFixed(1)}/10
                        </span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600 dark:text-gray-300">Hand Gestures</span>
                        <span className={`font-semibold ${getScoreColor(analysisResult.detailed_scores.hand_gestures)}`}>
                          {analysisResult.detailed_scores.hand_gestures.toFixed(1)}/10
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Message */}
                {analysisResult.message && (
                  <div className="bg-blue-50 dark:bg-blue-900 rounded-lg p-4 border border-blue-200 dark:border-blue-700">
                    <p className="text-blue-800 dark:text-blue-200 font-medium">
                      {analysisResult.message}
                    </p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Info Card */}
        <div className="mt-8 bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6 sm:p-8">
          <h3 className="text-2xl font-bold text-gray-800 dark:text-white mb-4 flex items-center">
            <Info className="w-6 h-6 mr-3 text-indigo-500" />
            About this Tool
          </h3>
          <p className="text-gray-600 dark:text-gray-300 mb-4">
            This Confidence Analyzer evaluates your speaking and presentation skills by analyzing both audio and visual cues from your video recordings.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold text-gray-800 dark:text-white mb-2">Audio Analysis</h4>
              <ul className="list-disc list-inside space-y-1 text-gray-600 dark:text-gray-300 text-sm">
                <li><strong>Volume:</strong> Measures speech clarity and audibility</li>
                <li><strong>Pitch Variation:</strong> Evaluates vocal expressiveness</li>
                <li><strong>Speech Rate:</strong> Analyzes speaking pace (140-160 WPM optimal)</li>
                <li><strong>Filler Words:</strong> Detects "um", "uh", and other hesitations</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-gray-800 dark:text-white mb-2">Visual Analysis</h4>
              <ul className="list-disc list-inside space-y-1 text-gray-600 dark:text-gray-300 text-sm">
                <li><strong>Eye Contact:</strong> Measures engagement with the camera</li>
                <li><strong>Posture:</strong> Evaluates body alignment and confidence</li>
                <li><strong>Smile Quantity:</strong> Assesses facial expressions and warmth</li>
                <li><strong>Hand Gestures:</strong> Analyzes appropriate use of gestures</li>
              </ul>
            </div>
          </div>
          <p className="mt-4 text-sm text-gray-500 dark:text-gray-400">
            💡 <strong>Tip:</strong> Record yourself in good lighting with clear audio for the most accurate analysis.
          </p>
        </div>
      </div>
    </div>
  );
};

export default ConfidenceAnalyzerPage;
